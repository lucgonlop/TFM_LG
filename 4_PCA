## This script was used for read distribution plotting, filtering low expressed genes and PCA analysis

# Reading needed data
seqdata <- read.delim("results/raw_counts.tsv")
head(seqdata)
colnames(seqdata) <- c("CA1-IR_rep1", "CA1-IR_rep2", "CA1-NI_rep1", "CA1-NI_rep2", "DCIS-IR_rep1", "DCIS-IR_rep2",
                       "DCIS-NI_rep1", "DCIS-NI_rep2", "MCF10A-IR_rep1", "MCF10A-IR_rep2", "MCF10A-NI_rep1", "MCF10A-NI_rep2",
                       "MCF10AT-IR_rep1", "MCF10AT-IR_rep2", "MCF10AT-NI_rep1", "MCF10AT-NI_rep2")
head(seqdata)

# Quality control from reads distribution
barplot(colSums(seqdata), names=colnames(seqdata))
title("Total reads")
abline(h=median(colSums(seqdata)),col="red")

# Low-expressed genes filtering
Filtrado de genes poco expresados
myCPM <- cpm(seqdata)
head(myCPM)
thresh <- myCPM > 0.5 # Filter those genes that has a CPM lower than 0.5
head(thresh)

table(rowSums(thresh)) # Number of discarded genes 

keep <- rowSums(thresh) >= 2 # Keep those genes that are expressed in AT LEAST 2 samples.
countdata.no.flat <- seqdata[keep,]
summary(keep) #How many genes are kept (TRUE) or are not (FALSE)?

dim(countdata.no.flat) # Number of kept genes and number of samples
head(countdata.no.flat)

# Principal component analysis
logcpm <- cpm(countdata.no.flat, log=TRUE)
plotMDS(logcpm)

# Experimental information table
sampleinfo <- read.delim("samples_info.txt")
head(sampleinfo)

sampleinfo$Condition <- as.factor(sampleinfo$Condition)
sampleinfo$Replicate <- as.factor(sampleinfo$Replicate)

sample.color <- c(brewer.pal(n = length(levels(sampleinfo$Condition)), name = "Set1"))[sampleinfo$Condition] #Asociar un color a cada condición
sample.symbol <- c(16,17)[sampleinfo$Replicate] #Asociar un tipo de punto a cada réplica. En mi caso tenía 2 réplicas, por eso pongo 2 tipos de puntos.

num_colors <- length(levels(sampleinfo$Condition))
palette_colors <- brewer.pal(n = num_colors, name = "Paired")
sample_color <- palette_colors[sampleinfo$Condition]

# Following code lines must be run simultaneously to obtain PCA plot:
plotMDS(logcpm, col=sample.color, pch=sample.symbol, cex=2, cex.axis=2, cex.lab=2)
title("PCA")
par(mar = c(5,5,5,5))
legend(3.0,4.15, xpd = T, fill= palette_colors,legend=levels(sampleinfo$Condition),cex=1,)
legend(3.0, 2.15, xpd = T, pch=c(16,17),legend=levels(sampleinfo$Replicate),cex=1)

# Following code lines must be run simultaneously to save PCA plot:
pdf("results/pca_all_samples.pdf", width = 15, height = 15, ) #To save plot in pdf format
plotMDS(logcpm, col=sample.color, pch=sample.symbol, cex=2, cex.axis=2, cex.lab=2)
title("PCA")
par(mar = c(5,5,5,5))
legend(3.0,4.15, xpd = T, fill= palette_colors,legend=levels(sampleinfo$Condition),cex=1,)
legend(3.0, 2.15, xpd = T, pch=c(16,17),legend=levels(sampleinfo$Replicate),cex=1)
dev.off()

# To extract and save PCA values (X and Y):
pca_all <- data.frame(plotMDS(logcpm, col=sample.color, pch=sample.symbol, cex=2, cex.axis=2, cex.lab=2))
pca_all <- data.frame(cbind(pca_all$x, pca_all$y))
write.csv(pca_all, "results/pca_all_samples.csv")
